name: Node.js CI with MongoDB

# When we push to our default branch,
# run this workflow
on:
  push:
    branches:
      - master
      - main
  
  pull_request:
    branches:
      - master
      - main

# Define the things to do within the workflow
jobs:

  # Run a job on Linux
  build-and-test-on-linux:
    runs-on: ubuntu-latest

    # sets up a MongoDB Docker container that runs the test jobs
    services:
      mongo:
        image: mongo:6.0

        # connect to the database
        ports:
          - 27017:27017

        # health check to make sure MongoDB is up before running tests
        options: >-
          --health-cmd="mongosh --eval 'db.runCommand({ ping: 1 })'" 
          --health-interval=10s 
          --health-timeout=5s 
          --health-retries=5

    # CI steps
    steps:
      # pulls the code into CI environment
      - uses: actions/checkout@v4

      # install Node.js so can use npm and TypeScript
      - uses: actions/setup-node@v4
        with:
          node-version: '18'

      # use package-lock,json to install dependencies (npm ci use package-lock strickly)
      - run: npm ci
      - run: npm run build

      # Install Docker
      - name: Install docker-compose
        run: |
          sudo apt-get update
          sudo apt-get install -y curl
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.22.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Check docker-compose version
        run: docker compose --version

      - name: Run docker-compose with secrets

        # the secrets come from the environment variables set in the CI/CD environment
        env:
          NODE_ENV: test
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          DATABASE_URL: mongodb://localhost:27017/symptoms-test
          PORT: 3000

        run: docker-compose up -d

      # to see docker-compose logs
      - name: Show docker-compose logs
        run: sudo docker-compose logs

      - name: Run tests
        run: npm test
        env:
          NODE_ENV: test
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}


